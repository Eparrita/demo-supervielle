{"version":3,"sources":["assets/images/logo.svg","services/Config.js","services/Apiservices.js","services/Endpoints.js","component/Value.js","component/Values.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","API","axios","create","baseURL","ApiService","getItems","url","Promise","resolve","reject","get","then","resp","data","catch","err","Endpoints","values","Value","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","item","compra","codigo","parseFloat","toFixed","venta","react_default","a","createElement","className","nombre","Component","Values","loading","getData","_this2","setState","cotizaciones","console","log","map","e","i","component_Value","key","src","Logo","alt","App","component_Values","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ea09d6d8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.2ed1fa92.svg\";","import axios from 'axios';\n\nconst BASE_URL = 'https://www.supervielle.com.ar/api/';\n\nconst API = axios.create ({\n    baseURL: BASE_URL\n})\n\nexport default API;","import API from './Config';\n\nconst ApiService = {\n\n    getItems: (url) => new Promise(\n        (resolve, reject) => {\n            API.get(url)\n                .then(resp => resp.data)\n                .then(data => resolve(data))\n                .catch(err => reject(err))\n        }\n    )\n}\n\nexport default ApiService;","\nconst Endpoints = {\n\n    values: 'cotizaciones'\n    \n}\n\nexport default Endpoints;","import React, { Component } from 'react';\n\nclass Value extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            item: props.item\n        }\n    }\n\n    render() {\n        const compra = (this.state.item.codigo === 'CLP') ? parseFloat(this.state.item.compra).toFixed(4) : parseFloat(this.state.item.compra).toFixed(2);\n        const venta = (this.state.item.codigo === 'CLP') ? parseFloat(this.state.item.venta).toFixed(4) : parseFloat(this.state.item.venta).toFixed(2);\n\n        return (\n            <div className=\"card-3\">\n                <header>\n                    <h3>{this.state.item.nombre}</h3>\n                </header>\n                <div className=\"card_body\">\n                    <p><span className=\"left\">Compra:</span> <span className=\"right\"><strong> {compra}</strong></span></p>\n                    <p><span className=\"left\">Venta:</span> <span className=\"right\"><strong> {venta}</strong></span></p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Value;","import React, { Component } from 'react';\nimport Logo from '../assets/images/logo.svg';\nimport ApiService from '../services/Apiservices'\nimport Endpoints from \"../services/Endpoints\";\n\nimport Value from \"./Value\";\n\nclass Values extends Component {\n    constructor() {\n        super();\n        this.state = {\n            data: [],\n            loading: true\n        }\n    }\n\n    componentDidMount() {\n        this.getData();\n    }\n\n    getData() {\n        ApiService.getItems(Endpoints.values)\n            .then(resp => {\n                this.setState({ data: resp.cotizaciones }, () => {\n                    //console.log(this.state)\n                });\n            })\n            .then(resp => {\n                this.setState({ loading: false }, () => {\n                    //console.log(this.state)\n                    \n                });\n            })\n            .catch(err => console.log(err))\n    }\n\n    render() {\n        const item = this.state.data.map((e, i) => {\n            return <Value key={i} item={e} />\n        })\n        return (\n            <div className=\"container-fluid values fade\">\n                <div className=\"container\">\n                    <div className={this.state.loading !== true ? \"values__content\" : \"hidden\"}>\n                        <ul>\n                            <li>\n                                <img src={Logo} alt=\"Supervielle\" />\n                            </li>\n                            <li>\n                                <h2>Cambiá dólares y euros convenientemente y sin moverte de tu casa. Ahora extendimos el horario de 8 a 20h</h2>\n                            </li>\n                            <li>\n                                <div className=\"values__content_card\">\n                                    {item}\n                                </div>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Values;","import React from 'react';\nimport Values from './component/Values'\n\nconst App = () => {\n  return <Values />\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/styles.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}